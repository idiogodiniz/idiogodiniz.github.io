pendentes

software
    ~ / desenvolvimento
        ~ / javascript
            ~ / 03.~ (aprofundamento em geral)
            ~ / 03.4 bigint
            ~ / 03.5 symbol
            ~ / 03.6 null e undefined
            ~ / 03.7 operadores detalhados

13. Implementar uma função que calcule o total a se pagar na compra de ingressos de cinema, a partir da quantidade de ingressos 'inteiras' e 'meias'. O valor do ingresso é R$ 28,50. Considere que se o ingresso for para QUARTA-FEIRA, ingressos 'inteiras' também custarão meia entrada.

14. Implementar uma função que calcule o total a se pagar na compra de ingressos de cinema, a partir da quantidade de ingressos 'inteiras' e 'meias'. O valor do ingresso é R$ 28,50. Considere que se o ingresso for para QUARTA-FEIRA, todo ingresso custará meia entrada. Se for um filme NACIONAL, o ingresso custará R$ 5,00 para 'inteira' e 'meia'. O desconto para filmes nacionais tem prioridade sobre o desconto de quarta-feira, ou seja, os dois descontos não podem acontecer ao mesmo tempo.

15. Implementar uma função que a partir de duas cores primárias informe a cor resultante. Se as cores informadas não forem primárias, a função deve lançar um erro dizendo que apenas cores primárias são aceitas.

16. Implementar uma função que informe a classificação de um aluno a partir de 3 notas, seguindo as regras abaixo:
- Se média maior que 8        = Aprovado com sucesso
- Se média entre 5 e 8        = Aprovado
- Se média entre 3 e 5        = Recuperação
- Se média menor que 3        = Reprovado
- Se média igual a zero        = Desistente

17. Implementar uma função que informe a classificação de um aluno a partir de 3 notas e da quantidade de faltas. O aluno já será considerado reprovado se a quantidade de faltas for maior que 30. A tabela abaixo apresenta as regras para os intervalos da média:
- Se média maior que 8        = Aprovado com sucesso
- Se média entre 5 e 8        = Aprovado
- Se média entre 3 e 5        = Recuperação
- Se média menor que 3        = Reprovado
- Se média igual a zero        = Desistente

18. Implementar uma função que calcule o IMC de uma pessoa e informe a classificação.

19. Implementar uma função que calcule o total a se pagar em uma compra na sorveteria, a partir do total de gramas comprado. O preço de 100g é R$ 3,50 mas se o total de gramas for maior que 1kg, o preço de 100g diminui 50 centavos.

20. Implementar uma função que represente a lógica do jogo "Jokenpow". A partir da jogada colocada pelo jogador1 e jogador2, a função deve informar quem ganhou o jogo, ou se deu empate.

21. Implementar uma função que calcule o valor da mensalidade que um aluno de faculdade deve pagar, a partir do valor cheio da mensalidade, se é isento (sim ou não) e do desconto (em %) que ele possui.

Condição - Parte VI

22. Implementar uma função que calcule o valor da mensalidade que um aluno de uma faculdade de tecnologia deve pagar, a partir da sigla do curso, se é isento (sim ou não) e do desconto (em %) que ele possui. Abaixo está o valor da mensalidade para cada curso:
- SI  (Sistemas de Informação)        = R$  550,00
- ADS (Análise e Desenv. de Sistemas) = R$  750,00
- CS  (Ciência da Computação)         = R$ 1150,00
- EC  (Engenharia da Computação)      = R$ 1300,00
- ES  (Engenharia de Software)        = R$  950,00

23. Implementar uma função que informe qual a situação de um candidato de vestibular a partir da nota que ele tirou, da nota de corte e nota mínima para aprovação. Considere as regras abaixo:
- Se a nota for menor que a nota de corte: "Candidato não passou"
- Se a nota for maior ou igual a nota de aprovação: "Candidato aprovado"
- Se a nota estiver entre a nota de corte e a nota mínima de aprovação: "Candidato está na lista de espera"

24. Implementar uma função que avalie a temperatura corporal de uma pessoa a partir da sua temperatura. A função deve retornar uma classificação seguindo as orientações abaixo:
- Temperatura menor que 37 graus: "Temperatura normal"
- Temperatura até 37,5 graus: "Febrícula"
- Temperatura de 37,6 a 38,5: "Febre moderada"
- Temperatura acima de 38,5: "Febre alta"

25. Implementar uma função que a partir de um dia e mês em formato numérico, informe qual é o signo da pessoa.

01. Implementar uma função que escreva no terminal os números naturais de 1 até um número informado.
Ex: (10) => 1 2 3 4 5 6 7 8 9 10

02. Implementar uma função que escreva no terminal os números naturais pares de 0 até um número informado.
Ex: (10) => 0 2 4 6 8 10

03. Implementar uma função que escreva no terminal os números naturais ímpares de 1 até um número informado.
Ex: (10) => 1 3 5 7 9

04. Implementar uma função que escreva no terminal os números naturais, a partir de um número de início e fim.
Ex: (3, 11) => 3 4 5 6 7 8 9 10 11

05. Implementar uma função que escreva no terminal os números naturais de 1 até um número informado de forma decrescente.
Ex: (10) => 10 9 8 7 6 5 4 3 2 1

06. Implementar uma função que escreva no terminal os números naturais pares de 0 até um número informado de forma decrescente.
Ex: (10) => 10 8 6 4 2 0

07. Implementar uma função que escreva no terminal os números naturais ímpares de 1 até um número informado de forma decrescente.
Ex: (10) => 9 7 5 3 1

08. Implementar uma função que escreva no terminal os números naturais, a partir de um número de início e fim, de forma decrescente.
Ex: (3, 11) => 11 10 9 8 7 6 5 4 3

09. Implementar uma função que escreva no terminal os números naturais múltiplos de número informado, de 0 até outro número informado.
Ex1: (4, 20) => 0, 4, 8, 12, 16, 20
Ex2: (6, 20) => 6, 12, 18

10. Implementar uma função que escreva no terminal o dobro dos números naturais de 1 até um número informado. A mensagem deve estar no formato: "O dobro de X é Y".
Ex:  (5) => O dobro de 1 é 2
            O dobro de 2 é 4
            O dobro de 3 é 6
            O dobro de 4 é 8
            O dobro de 5 é 10

11. Implementar uma função que escreva no terminal a tabuada de um número informado. A mensagem deve estar no formato: "A x B = X".
Ex:  (5) => 5 x 1 = 5
            5 x 2 = 10
            5 x 3 = 15
            5 x 4 = 20
            5 x 5 = 25
            5 x 6 = 30
            5 x 7 = 35
            5 x 8 = 40
            5 x 9 = 45
            5 x 10 = 50

Parte II - Desenhar Formas - Funções (void)

12. Implementar uma função que retorne um texto que represente a forma de uma linha a partir do tamanho de pontos que a compõem, conforme abaixo:
Exemplo: 4 pontos
* * * *


13. Implementar uma função que retorne um texto que represente a forma de um quadrado a partir da quantidade de linhas, conforme abaixo:
Exemplo: 4 linhas
* * * *
* * * *
* * * *
* * * *


14. Implementar uma função que retorne um texto que represente a forma de um retângulo a partir da quantidade de linhas e colunas, conforme abaixo:
Exemplo: 4 linhas e 2 colunas
* *
* *
* *
* *


15. Implementar uma função que retorne um texto que represente a forma de um triângulo a partir da quantidade de linhas, conforme abaixo:
Exemplo: 5 linhas
*
* *
* * *
* * * * 
* * * * *


16. Implementar uma função que retorne um texto que represente a forma de um triângulo invertido a partir da quantidade de linhas, conforme abaixo:
Exemplo: 5 linhas
        *
      * *
    * * *
  * * * * 
* * * * *

17. Implementar uma função que calcule a soma dos números naturais de 1 até um número informado.
Ex: Somar de 1 até 5 => 1+2+3+4+5 => 15

18. Implementar uma função que calcule a soma dos números pares naturais de 1 até um número informado.
Ex: Somar pares de 1 até 5 => 2+4 => 6

19. Implementar uma função que calcule a soma dos números ímpares naturais de 1 até um número informado.
Ex: Somar ímpares de 1 até 5 => 1+3+5 => 9

20. Implementar uma função que calcule o fatorial de um número informado.
Ex: Fatorial de 5 => 5*4*3*2*1 => 120

21. Implementar uma função que calcule a potenciação a partir de um número e do expoente. Obs: Essa versão da potenciação deve se preocupar apenas com números naturais, ou seja, inteiros positivos. Se a potência for zero, retorne 1. Se algum parâmetro for negativo, lançar um erro.
Ex: Potência de 3 elevado a 3 => 27

Parte IV - Desenhar Formas - Funções (void)

22. Implementar uma função que retorne um texto que represente a forma de um losango a partir da quantidade de linhas, conforme abaixo:
Exemplo: 5 linhas
        *
      * * * 
    * * * * *
  * * * * * * * 
* * * * * * * * * 
  * * * * * * * 
    * * * * * 
      * * * 
        * 


23. Implementar uma função que retorne um texto que represente a forma de um triângulo a partir da quantidade de linhas, conforme abaixo:
Exemplo: 4 linhas
1
2 2
3 3 3
4 4 4 4


24. Implementar uma função que retorne um texto que represente a forma de um triângulo a partir da quantidade de linhas, conforme abaixo:
Exemplo: 4 linhas
1
2 3
4 5 6
7 8 9 10


25. Implementar uma função que retorne um texto que represente a forma de um triângulo a partir da quantidade de linhas, conforme abaixo:
Exemplo: 4 linhas
   1
  2 2
 3 3 3
4 4 4 4


26. Implementar uma função que retorne um texto que represente a forma de um triângulo a partir da quantidade de linhas, conforme abaixo:
Exemplo: 5 linhas
        1
      2 1 2 
    3 2 1 2 3
  4 3 2 1 2 3 4
5 4 3 2 1 2 3 4 5

Parte V - Funções com retorno

27. Implementar uma função que separe os caracteres de um texto por hífen.
Ex: ("Bora programar") => "B-o-r-a- -p-r-o-g-r-a-m-a-r-

28. Implementar uma função que verifique quantas vogais aparecem em um texto.
Ex: ("Bora programar") => 5

29. Implementar uma função que verifique se todas as vogais aparecem em um texto.
Ex: ("Eu avisei você") => true

30. Implementar uma função que conte a frequência de um caractere em um texto.
Ex: ("Bora programar", "a") => 3

31. Implementar uma função que conte a frequência de um digito em um número.
Ex: (99938, 9) => 3

32. Implementar uma função que inverta os caracteres de um texto recebido.
Ex: "Bruno" => "onurB"

33. Implementar uma função que verifique se um texto é um palíndromo.
Ex: "luz azul" => true

34. Implementar uma função que inverta os digitos de um número recebido.
Ex: 12345 => 54321

35. Implementar uma função que verifique se um número é um palíndromo.
Ex: 1198911 => true

Parte VI - Funções com retorno

36. Implementar uma função que converta uma palavra para ASCII. Dica: Use a função Convert.ToInt32(..) para C#, e charCodeAt(...) para JS.
Ex: "Bruno" => "66 114 117 110 111"

37. Implementar uma função que verifique se uma senha é forte. Para ser forte, ela precisa ter pelo menos 2 caracteres especiais, 2 números e 8 digitos.
Ex: "bruno@123#" => true

38. Implementar uma função que converta uma palavra para Binário.
Ex: "Bruno" => "01100010 01110010 01110101 01101110 01101111"

39. Implementar uma função que verifique, sim ou não, se um número é primo.
Ex: 17 => true

40. Implementar uma função que verifique qual é o número da sequência de fibonacci, a partir de uma posição informada.
Sequência Fibonacci: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
Ex: 10 => 55

41. Implementar uma função que implemente a criptografia ZENIT POLAR.
Ex: "bruno" => "btule"

01. Implementar uma função que recebendo um array de números inteiros, escreva seus elementos no terminal.
Ex: [8,2,10,5] => 8
                  2
                  10
                  5

02. Implementar uma função que recebendo um número limite, retorne um array contendo uma sequência de 0 até o número anterior ao limite.
Ex: 5 => [0,1,2,3,4]

03. Implementar uma função que recebendo um número limite, retorne um array contendo uma sequência do número anterior ao limite até 0.
Ex: 5 => [4,3,2,1,0]


04. Implementar uma função que recebendo um número limite, retorne um array contendo uma sequência de 1 até o número limite.
Ex: 5 => [1,2,3,4,5]

05. Implementar uma função que recebendo um número limite, retorne um array contendo uma sequência do número limite até 1.
Ex: 5 => [5,4,3,2,1]



06. Implementar uma função que recebendo um número de início e fim, retorne um array contendo uma sequência do número de início até o número final.
Ex: (3, 8) => [3,4,5,6,7,8]

07. Implementar uma função que recebendo um número de início e fim, retorne um array contendo uma sequência do número final até o número inicial.
Ex: (3, 8) => [8,7,6,5,4,3]

08. Implementar uma função que recebendo um array de números inteiros, retorne seu maior valor.
Ex: [8,2,10,5] => 10

09. Implementar uma função que recebendo um array de números inteiros, retorne seu menor valor.
Ex: [8,2,10,5] => 2

10. Implementar uma função que recebendo um array de números inteiros, some seus elementos.
Ex: [2,5,8] => 15

11. Implementar uma função que recebendo um array de números inteiros, calcule a média dos elementos.
Ex: [2,5,8] => 5

12. Implementar uma funç

13. Implementar uma função que recebendo um array de números inteiros, retorne um array com o dobro de cada elemento.
Ex: [1,2,3,4,5] => [2,4,6,8,10]

14. Implementar uma função que recebendo um número, retorne um array com a tabuada desse número.
Ex: 4 =>  [0,4,8,12,16,20,24,28,32,36,40]

15. Implementar uma função que recebendo o valor de 'a', 'b' e 'c', calcule a fórmula de bhaskara.
Ex: (1,12,-13) => [1,-13]

16. Implementar uma função que recebendo um texto, retorne um array de texto com o código ascii de cada caractere.
Ex: "Bruno" =>  [66, 114, 117, 110, 111]

17. Implementar uma função que recebendo um array de números inteiros, retorne o array com o menor elemento na primeira posição.
Ex: [4,2,1,3,7] => [1,2,4,3,7]

18. Implementar uma função que recebendo um array de números inteiros, retorne seu maior produto.
Ex: [4,2,1,3,2] => 12

19. Implementar uma função que recebendo um array de números inteiros e um número, retorne verdadeiro ou falso se o número existe nos elementos do array.
Ex: ([1,2,3,4,5], 2) =>  true
    ([1,2,3,4,5], 6) =>  false

20. Implementar uma função que recebendo um array de números inteiros e um número, retorne um novo array com o número adicionado ao final.
Ex: ([1,2,3,4,5], 6) =>  [1,2,3,4,5,6]

21. Implementar uma função que recebendo um array de números inteiros e um número, retorne um novo array com o número adicionado no começo.
Ex: ([1,2,3,4,5], 6) =>  [6,1,2,3,4,5]

22. Implementar uma função que recebendo um array de números inteiros, um número e uma posição, retorne um novo array com o número adicionado na posição informada.
Ex: ([1,2,3,4,5], 10, 2) =>  [1,2,10,3,4,5]

23. Implementar uma função que recebendo um array de números inteiros e um número, retorne um novo array filtrando os elementos maiores que o número informado.
Ex: ([1,2,3,4,5], 2) =>  [3,4,5]

24. Implementar uma função que recebendo um array de números inteiros, retorne um novo array sem conter números repetidos.
Ex: [5,2,5,10,5] => [5,2,10]

25. Implementar uma função que recebendo um array de palavras, retorne um novo array sem conter palavras repetidas.
Ex: ["sangue", "nos", "olho", "!", "!", "!" ] => ["sangue", "nos", "olho", "!" ]

26. Implementar uma função que recebendo dois arrays de números inteiros, retorne um array com sua intersecção.
Ex: ([1,2,3,4,5], [2,3,6,7,8]) => [2,3]

27. Implementar uma função que recebendo dois arrays de números inteiros, retorne um array com sua união.
Ex: ([1,2,3,4,5], [4,5,6,7,8]) => [1,2,3,4,5,4,5,6,7,8]

28. Implementar uma função que recebendo dois arrays de números inteiros, retorne um array com sua união sem duplicar os elementos.
Ex: ([1,2,3,4,5], [4,5,6,7,8]) => [1,2,3,4,5,6,7,8]

29. Implementar uma função que recebendo dois arrays de números inteiros, retorne um array com os elementos que existem apenas no primeiro array.
Ex: ([0,1,2,3,4], [2,3,4,5,6]) => [0,1]

30. Implementar uma função que recebendo um número que representa um tamanho, retorne um array (de tamanho igual ao valor recebido) com a sequência de fibonacci.
Ex: 7 => [1,1,2,3,5,8,13]

31. Implementar uma função que recebendo um array de números inteiros, retorne o array com os dois menores elementos na primeira e segunda posição.
Ex: [4,2,1,3,8] => [1,2,4,3,8]

32. Implementar uma função que recebendo um array de números inteiros, retorne o array com seus elementos ordenados de forma crescente.
Ex: [4,2,1,3,5] => [1,2,3,4,5]

33. Implementar uma função que recebendo um array de números inteiros, retorne a maior sequência de números consecutivos.
Ex: [3,1,2,3,8,4,5,6,7,8] => [4,5,6,7,8]

34. Implementar uma função que recebendo um texto, retorne um array de texto com o código binário de cada caractere.
Ex: "Bruno" => ["01000010", "01110010", "01110101", "01101110", "01101111"]

35. Implementar uma função que recebendo um número que representa um tamanho, retorne um array (de tamanho igual ao valor recebido) com a sequência dos números primos. *Sugestão: crie uma função auxiliar que verifique se um número é primo e use na função principal.
Ex: (10) => [2 3 4 5 7 9 11 13 17 19]

36. Implementar uma função que recebendo um array de números inteiros e um número, retorne um array com 3 elementos que sua soma resultam no número recebido.
Ex: ([1,3,5,4,5], 11) => [1,5,5]
    ([1,3,5,4,5], 9) => [1,3,5]
